I"”<p>The <strong>Ramerâ€“Douglasâ€“Peucker Algorithm</strong> is a an algorithms that reduce the number of points that is approximated by a series of points. It is also known as the <strong>Douglasâ€“Peucker algorithm</strong> and <strong>iterative end-point fit algorithm</strong>. In simple words, it represent a complex line with fewer points in a visually proper way.</p>

<p><img src="https://user-images.githubusercontent.com/28982255/82112521-2c5feb80-976b-11ea-8dbe-9b59d4b922ad.png" alt="503cdff1-influxdata1" />
<em>Original dataset (right) and reduced output (left) from Ramer-Douglas-Peucker Algorithm. Image from NAMEKDEV.</em></p>

<h3 id="overview">Overview</h3>

<p>The main purpose of this algorithm is to find a similar curve with fewer points for a given curve composed of line segments (also called <strong>Polylines</strong>). This algorithm define â€˜disimilarâ€™ based on the maxium distance between the original curve and the simplied curve, i.e. the Hausdroff Distance. The simplified curve consist of a subset of points that defined the original curve. The Ramerâ€“Douglasâ€“Peucker Algorithm is most commonly used in geospatial visualizations, like Google Maps, but also useful for other in-browser visualizations as well.</p>

<h3 id="working-of-ramerdouglaspeucker-algorithm">Working of Ramerâ€“Douglasâ€“Peucker Algorithm</h3>

<p>In order to use this algorithms, the user must the epsilon ( Îµ ), a threshold limit that is used to determine which point to determine and discard, and it should be a value greater than zero.</p>

<p><strong>Step-1</strong> :  This algorithms stored the first and the last point of the curve and then it draws the shortest line from the bookend points.</p>

<p><img src="https://user-images.githubusercontent.com/28982255/82113093-e3129a80-9770-11ea-8a47-96a5d8038546.png" alt="c3044882-influxdata3" /></p>

<p><strong>Step-2</strong>:  Its determine the point farthest point from the line segment with the first and last points as end points.</p>

<p><img src="https://user-images.githubusercontent.com/28982255/82113113-fcb3e200-9770-11ea-828b-7b90e7a3db5e.png" alt="473bcfba-influxdata4" /></p>

<p><strong>Step-3</strong>: Any points within the epsilon distance from this line will be removed and the approximation will be drawn.</p>

<p><img src="https://user-images.githubusercontent.com/28982255/82113127-17865680-9771-11ea-9eee-734a77da4f58.png" alt="bd5f4e41-influxdata5" /></p>

<p>The process repeats recurcively until the new approximation for the polyline has been formed.</p>

<p><img src="https://user-images.githubusercontent.com/28982255/82113279-7ef0d600-9772-11ea-84c5-0e28e4938f38.gif" alt="rdp" /></p>

<h3 id="pseudocode">Pseudocode</h3>

<p>The Pseudocode of Ramerâ€“Douglasâ€“Peucker Algorithm :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function DouglasPeucker(PointList[], epsilon)
    // Find the point with the maximum distance
    dmax = 0
    index = 0
    end = length(PointList)
    for i = 2 to (end - 1) {
        d = perpendicularDistance(PointList[i], Line(PointList[1], PointList[end]))
        if (d &gt; dmax) {
            index = i
            dmax = d
        }
    }

    ResultList[] = empty;

    // If max distance is greater than epsilon, recursively simplify
    if (dmax &gt; epsilon) {
        // Recursive call
        recResults1[] = DouglasPeucker(PointList[1...index], epsilon)
        recResults2[] = DouglasPeucker(PointList[index...end], epsilon)

        // Build the result list
        ResultList[] = {recResults1[1...length(recResults1) - 1], recResults2[1...length(recResults2)]}
    } else {
        ResultList[] = {PointList[1], PointList[end]}
    }
    // Return the result
    return ResultList[]
end
</code></pre></div></div>

<h3 id="complexity">Complexity</h3>

<p>The running time of Ramerâ€“Douglasâ€“Peucker Algorithm when a polyline consist of <em>n-1</em> segments and <em>n</em> vertices is given by the reccurence <em>T(n)=T(i+1)+T(n-i)+O(n)</em> where is the value of Index in peudocode.</p>

<p>In worst case, the algorithm has a time complexity of  <strong>O(nÂ²)</strong>.</p>

<p>In best case, it has a time complexity of <strong>O(n log(n))</strong> .</p>

<h3 id="applications">Applications</h3>

<p>This algorithms is used for proccessing <em>vector graphics</em> and and <em>cartographic generalization</em>. It is widely used in Robotics to perform simplification and denoising of range data accquired by a rotating range scanner.</p>

<h3 id="example-of-ramerdouglaspeucker-algorithm">Example of Ramerâ€“Douglasâ€“Peucker Algorithm</h3>

<iframe height="600px" width="100%" src="https://repl.it/@ayanbag/rgp-algo?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>

<p>Download the code <a href="https://github.com/ayanbag/rdp-algorithm">here</a></p>
:ET